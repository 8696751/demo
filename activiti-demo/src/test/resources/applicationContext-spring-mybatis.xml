<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
">

	<!-- JNDI方式配置数据源 -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName" value="${jndiName}"></property> </bean> -->
	<!-- ========================================配置数据源========================================= -->
	<!-- 配置数据源，使用的是Hikari Datasource数据源 -->
	<!-- Hikari Datasource -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="shutdown">
		<!-- <property name="driverClassName" value="${db.driverClass}" /> --> <!-- 无需指定，除非系统无法自动识别 -->
		<property name="jdbcUrl" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
		<!-- 连接只读数据库时配置为true， 保证安全 -->
		<property name="readOnly" value="false" />
		<!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
		<property name="connectionTimeout" value="30000" />
		<!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
		<property name="idleTimeout" value="600000" />
		<!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL 
			wait_timeout参数（show variables like '%timeout%';） -->
		<property name="maxLifetime" value="1800000" />
		<!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
		<property name="maximumPoolSize" value="15" />
	</bean>

	<!-- ========================================分隔线========================================= -->

	<!-- ========================================针对myBatis的配置项============================== -->
	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描所有SQL映射的xml文件 -->
		<property name="mapperLocations" value="classpath:mybatis-config/*.xml" />
	</bean>
	<!-- 配置扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描com.ebao.ls.mybatis这个包以及它的子包下的所有映射接口类 -->
		<property name="basePackage" value="com.ebao.ls.mybatis" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- ========================================分隔线========================================= -->
	<!-- 配置Spring的事务管理器 -->
	<bean id="transactionManager"
	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注解方式配置事物 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 拦截器方式配置事物 -->
	<!-- <tx:advice id="transactionAdvice" transaction-manager="transactionManager"> -->
	<!-- <tx:attributes> -->
	<!-- <tx:method name="add*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="append*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="insert*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="save*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="update*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="modify*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="edit*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="delete*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="remove*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="repair" propagation="REQUIRED" /> -->
	<!-- <tx:method name="delAndRepair" propagation="REQUIRED" /> -->

	<!-- <tx:method name="get*" propagation="SUPPORTS" /> -->
	<!-- <tx:method name="find*" propagation="SUPPORTS" /> -->
	<!-- <tx:method name="load*" propagation="SUPPORTS" /> -->
	<!-- <tx:method name="search*" propagation="SUPPORTS" /> -->
	<!-- <tx:method name="datagrid*" propagation="SUPPORTS" /> -->

	<!-- <tx:method name="*" propagation="SUPPORTS" /> -->
	<!-- </tx:attributes> -->
	<!-- </tx:advice> -->

</beans>